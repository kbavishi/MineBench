/* semphy_cmdline.h */

/* File autogenerated by gengetopt version 2.16  */

#ifndef SEMPHY_CMDLINE_H
#define SEMPHY_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef SEMPHY_CMDLINE_PARSER_PACKAGE
#define SEMPHY_CMDLINE_PARSER_PACKAGE "semphy"
#endif

#ifndef SEMPHY_CMDLINE_PARSER_VERSION
#define SEMPHY_CMDLINE_PARSER_VERSION "2.0.b3"
#endif

struct semphy_args_info
{
  int SEMPHY_flag;	/* Do SEMPHY step (default=off).  */
  int bbl_flag;	/* Only optimize branch length (default=off).  */
  int likelihood_flag;	/* Compute likelihood for fixed tree (default=off).  */
  int PerPosLike_flag;	/* Compute likelihood per position for a fixed tree (default=off).  */
  int PerPosPosterior_flag;	/* Compute likelihood per position and Bayesian posterior (default=off).  */
  int rate_flag;	/* optimize rate of gene (default=off).  */
  int max_semphy_iter_arg;	/* Max number of SEM iterations (default='100').  */
  char * max_semphy_iter_orig;	/* Max number of SEM iterations original value given at command line.  */
  float epsilonLikelihoodImprovement4iterNJ_arg;	/* The threshold for optimization of likelihood of the tree, in iterative distance-based tree reconstruction (default='0.01').  */
  char * epsilonLikelihoodImprovement4iterNJ_orig;	/* The threshold for optimization of likelihood of the tree, in iterative distance-based tree reconstruction original value given at command line.  */
  float epsilonLikelihoodImprovement4pairwiseDistance_arg;	/* The threshold for optimization of likelihood of a pair of sequences, in pairwise distance optimization (default='0.0001').  */
  char * epsilonLikelihoodImprovement4pairwiseDistance_orig;	/* The threshold for optimization of likelihood of a pair of sequences, in pairwise distance optimization original value given at command line.  */
  float epsilonLikelihoodImprovement4alphaOptimiz_arg;	/* The threshold for optimization of likelihood of the tree, in alpha optimization (default='0.01').  */
  char * epsilonLikelihoodImprovement4alphaOptimiz_orig;	/* The threshold for optimization of likelihood of the tree, in alpha optimization original value given at command line.  */
  float epsilonLikelihoodImprovement4BBL_arg;	/* The threshold for optimization of likelihood of the tree, in branch-lengths optimization (default='0.01').  */
  char * epsilonLikelihoodImprovement4BBL_orig;	/* The threshold for optimization of likelihood of the tree, in branch-lengths optimization original value given at command line.  */
  int maxNumOfBBLIter_arg;	/* Number of BBL iterations in BBL+ALPHA optimization (default='10').  */
  char * maxNumOfBBLIter_orig;	/* Number of BBL iterations in BBL+ALPHA optimization original value given at command line.  */
  int consurf_flag;	/* version for use in consurf (default=off).  */
  int BPrepeats_arg;	/* Use bootstrap and set number of repeats.  */
  char * BPrepeats_orig;	/* Use bootstrap and set number of repeats original value given at command line.  */
  int BPconsensus_arg;	/* Use bootstrap and compute a Consensus tree.  */
  char * BPconsensus_orig;	/* Use bootstrap and compute a Consensus tree original value given at command line.  */
  int BPonUserTree_flag;	/* Use compute support for user provided tree (default=off).  */
  char * sequence_arg;	/* Sequence file name (default='-').  */
  char * sequence_orig;	/* Sequence file name original value given at command line.  */
  char * tree_arg;	/* Tree file name.  */
  char * tree_orig;	/* Tree file name original value given at command line.  */
  char * constraint_arg;	/* Constraint Tree file name.  */
  char * constraint_orig;	/* Constraint Tree file name original value given at command line.  */
  char * outputfile_arg;	/* Output file (default='-').  */
  char * outputfile_orig;	/* Output file original value given at command line.  */
  char * treeoutputfile_arg;	/* Tree output file (default='-').  */
  char * treeoutputfile_orig;	/* Tree output file original value given at command line.  */
  int gaps_flag;	/* Remove positions with gaps (default=off).  */
  long seed_arg;	/* Seed random number generator.  */
  char * seed_orig;	/* Seed random number generator original value given at command line.  */
  int alphabet_arg;	/* Alphabet Size (default='20').  */
  char * alphabet_orig;	/* Alphabet Size original value given at command line.  */
  float ratio_arg;	/* Transition/Transversion ratio (default='2.0').  */
  char * ratio_orig;	/* Transition/Transversion ratio original value given at command line.  */
  char * ACGprob_arg;	/* User input nucleotide frequencies. String separated list for A,C,G (default='0.25,0.25,0.25').  */
  char * ACGprob_orig;	/* User input nucleotide frequencies. String separated list for A,C,G original value given at command line.  */
  float inputRate_arg;	/* Set External globalRate (default='1.0').  */
  char * inputRate_orig;	/* Set External globalRate original value given at command line.  */
  int homogeneous_flag;	/* Don't use Gamma ASRV (default=off).  */
  float alpha_arg;	/* Set alpha for Gamma ASRV.  */
  char * alpha_orig;	/* Set alpha for Gamma ASRV original value given at command line.  */
  int optimizeAlpha_flag;	/* Optimize alpha for Gamma ASRV (default=off).  */
  int categories_arg;	/* Number of categories to use with descrete Gamma ASRV (default='8').  */
  char * categories_orig;	/* Number of categories to use with descrete Gamma ASRV original value given at command line.  */
  int laguerre_flag;	/* Use Laguerre approximation of Gamma - CURRENTLY NOT IMPLIMENTED (default=off).  */
  char * modelfile_arg;	/* Use user input file as model.  */
  char * modelfile_orig;	/* Use user input file as model original value given at command line.  */
  int verbose_arg;	/* Log report level (verbose) (default='1').  */
  char * verbose_orig;	/* Log report level (verbose) original value given at command line.  */
  char * Logfile_arg;	/* Log output file name (default='-').  */
  char * Logfile_orig;	/* Log output file name original value given at command line.  */
  
  int help_given ;	/* Whether help was given.  */
  int full_help_given ;	/* Whether full-help was given.  */
  int version_given ;	/* Whether version was given.  */
  int SEMPHY_given ;	/* Whether SEMPHY was given.  */
  int bbl_given ;	/* Whether bbl was given.  */
  int likelihood_given ;	/* Whether likelihood was given.  */
  int PerPosLike_given ;	/* Whether PerPosLike was given.  */
  int PerPosPosterior_given ;	/* Whether PerPosPosterior was given.  */
  int rate_given ;	/* Whether rate was given.  */
  int max_semphy_iter_given ;	/* Whether max-semphy-iter was given.  */
  int epsilonLikelihoodImprovement4iterNJ_given ;	/* Whether epsilonLikelihoodImprovement4iterNJ was given.  */
  int epsilonLikelihoodImprovement4pairwiseDistance_given ;	/* Whether epsilonLikelihoodImprovement4pairwiseDistance was given.  */
  int epsilonLikelihoodImprovement4alphaOptimiz_given ;	/* Whether epsilonLikelihoodImprovement4alphaOptimiz was given.  */
  int epsilonLikelihoodImprovement4BBL_given ;	/* Whether epsilonLikelihoodImprovement4BBL was given.  */
  int maxNumOfBBLIter_given ;	/* Whether maxNumOfBBLIter was given.  */
  int consurf_given ;	/* Whether consurf was given.  */
  int NJ_given ;	/* Whether NJ was given.  */
  int homogeneousRatesDTME_given ;	/* Whether homogeneousRatesDTME was given.  */
  int pairwiseGammaDTME_given ;	/* Whether pairwiseGammaDTME was given.  */
  int commonAlphaDTME_given ;	/* Whether commonAlphaDTME was given.  */
  int rate4siteDTME_given ;	/* Whether rate4siteDTME was given.  */
  int posteriorDTME_given ;	/* Whether posteriorDTME was given.  */
  int BPrepeats_given ;	/* Whether BPrepeats was given.  */
  int BPconsensus_given ;	/* Whether BPconsensus was given.  */
  int BPonUserTree_given ;	/* Whether BPonUserTree was given.  */
  int sequence_given ;	/* Whether sequence was given.  */
  int tree_given ;	/* Whether tree was given.  */
  int constraint_given ;	/* Whether constraint was given.  */
  int outputfile_given ;	/* Whether outputfile was given.  */
  int treeoutputfile_given ;	/* Whether treeoutputfile was given.  */
  int gaps_given ;	/* Whether gaps was given.  */
  int seed_given ;	/* Whether seed was given.  */
  int alphabet_given ;	/* Whether alphabet was given.  */
  int ratio_given ;	/* Whether ratio was given.  */
  int ACGprob_given ;	/* Whether ACGprob was given.  */
  int inputRate_given ;	/* Whether inputRate was given.  */
  int homogeneous_given ;	/* Whether homogeneous was given.  */
  int alpha_given ;	/* Whether alpha was given.  */
  int optimizeAlpha_given ;	/* Whether optimizeAlpha was given.  */
  int categories_given ;	/* Whether categories was given.  */
  int laguerre_given ;	/* Whether laguerre was given.  */
  int day_given ;	/* Whether day was given.  */
  int jtt_given ;	/* Whether jtt was given.  */
  int rev_given ;	/* Whether rev was given.  */
  int wag_given ;	/* Whether wag was given.  */
  int cprev_given ;	/* Whether cprev was given.  */
  int nucjc_given ;	/* Whether nucjc was given.  */
  int aaJC_given ;	/* Whether aaJC was given.  */
  int k2p_given ;	/* Whether k2p was given.  */
  int hky_given ;	/* Whether hky was given.  */
  int modelfile_given ;	/* Whether modelfile was given.  */
  int verbose_given ;	/* Whether verbose was given.  */
  int Logfile_given ;	/* Whether Logfile was given.  */

  int DistanceTableEstimationMethod_group_counter; /* counter for group DistanceTableEstimationMethod */
  int Model_group_counter; /* counter for group Model */
} ;

int semphy_cmdline_parser (int argc, char * const *argv, struct semphy_args_info *args_info);
int semphy_cmdline_parser2 (int argc, char * const *argv, struct semphy_args_info *args_info, int override, int initialize, int check_required);
int semphy_cmdline_parser_file_save(const char *filename, struct semphy_args_info *args_info);

void semphy_cmdline_parser_print_help(void);
void semphy_cmdline_parser_print_full_help(void);
void semphy_cmdline_parser_print_version(void);

void semphy_cmdline_parser_init (struct semphy_args_info *args_info);
void semphy_cmdline_parser_free (struct semphy_args_info *args_info);

int semphy_cmdline_parser_required (struct semphy_args_info *args_info, const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SEMPHY_CMDLINE_H */
